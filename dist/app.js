"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.organizationRecaptchaMiddleware = exports.appRecaptchaMiddleware = exports.adminRecaptchaMiddleware = exports.userPassportMiddleware = exports.adminPassportMiddleware = exports.userDeviceService = exports.userService = exports.adminService = exports.listTokenUseCase = exports.getTokenUseCase = exports.updateTokenUseCase = exports.deleteTokenUseCase = exports.deletePortfolioUseCase = exports.createTokenUseCase = exports.createUserDeviceValidator = exports.updateUserValidator = exports.createUserValidator = exports.resetPasswordValidator = exports.userMailService = exports.adminMailerService = exports.authService = exports.adminAuthService = exports.adminTokenService = exports.userTokenService = exports.uniqueIdentifierService = exports.mailService = exports.hashService = exports.mailRepository = exports.userDeviceRepository = exports.userPasswordResetRepository = exports.userVerificationRepository = exports.userAggregatorRepository = exports.adminPasswordResetRepository = exports.userRepository = exports.adminRepository = exports.tokenRepository = exports.portfolioRepository = exports.httpClient = exports.config = void 0;
require("reflect-metadata");
const axios_1 = __importDefault(require("axios"));
const MailTemplateRepository_1 = require("./infrastructure/emails/MailTemplateRepository");
const AuthService_1 = require("./application/services/AuthService");
const AdminMailerService_1 = require("./application/services/AdminMailerService");
const AdminService_1 = require("./application/services/AdminService");
const EnvironmentConfig_1 = require("./infrastructure/config/EnvironmentConfig");
const RepositoryFactory_1 = require("./infrastructure/database/RepositoryFactory");
const Argon2HashService_1 = require("./infrastructure/services/Argon2HashService");
const JWTTokenService_1 = require("./infrastructure/services/JWTTokenService");
const SendgridMailService_1 = require("./infrastructure/services/SendgridMailService");
const UUIDService_1 = require("./infrastructure/services/UUIDService");
const CreateTokenUseCase_1 = require("./application/usecases/CreateTokenUseCase");
const ListTokenUseCase_1 = require("./application/usecases/ListTokenUseCase");
const GetTokenUseCase_1 = require("./application/usecases/GetTokenUseCase");
const middlewares_1 = require("./interfaces/middlewares");
const RecaptchaMiddleware_1 = require("./interfaces/middlewares/RecaptchaMiddleware");
const UserService_1 = require("./application/services/UserService");
const UserDeviceService_1 = require("./application/services/UserDeviceService");
const UserMailerService_1 = require("./application/services/UserMailerService");
const ResetPasswordJoiValidator_1 = require("./infrastructure/validators/ResetPasswordJoiValidator");
const CreateUserJoiValidator_1 = require("./infrastructure/validators/admin/CreateUserJoiValidator");
const UpdateUserJoiValidator_1 = require("./infrastructure/validators/UpdateUserJoiValidator");
const CreateUserDeviceJoiValidator_1 = require("./infrastructure/validators/CreateUserDeviceJoiValidator");
const DeleteTokenUseCase_1 = require("./application/usecases/DeleteTokenUseCase");
const UpdateTokenUseCase_1 = require("./application/usecases/UpdateTokenUseCase");
exports.config = (0, EnvironmentConfig_1.parseConfigFromEnvironment)();
exports.httpClient = axios_1.default.create();
const repositoryFactory = new RepositoryFactory_1.RepositoryFactory(exports.config);
_a = repositoryFactory.create().db, exports.portfolioRepository = _a.portfolio, exports.tokenRepository = _a.token, exports.adminRepository = _a.admin, exports.userRepository = _a.user, exports.adminPasswordResetRepository = _a.adminPasswordReset, exports.userAggregatorRepository = _a.userAggregator, exports.userVerificationRepository = _a.userVerification, exports.userPasswordResetRepository = _a.userPasswordReset, exports.userDeviceRepository = _a.userDevice;
exports.mailRepository = new MailTemplateRepository_1.MailTemplateRepository();
exports.hashService = new Argon2HashService_1.Argon2HashService();
exports.mailService = new SendgridMailService_1.SendgridMailService(exports.config);
exports.uniqueIdentifierService = new UUIDService_1.UUIDService();
exports.userTokenService = new JWTTokenService_1.JWTTokenService(exports.config.jwt.userSecret);
exports.adminTokenService = new JWTTokenService_1.JWTTokenService(exports.config.jwt.adminSecret);
exports.adminAuthService = new AuthService_1.AuthService(exports.adminRepository, exports.hashService, exports.adminTokenService);
exports.authService = new AuthService_1.AuthService(exports.userRepository, exports.hashService, exports.userTokenService);
exports.adminMailerService = new AdminMailerService_1.AdminMailerService(exports.config, exports.mailService, exports.mailRepository);
exports.userMailService = new UserMailerService_1.UserMailerService(exports.config, exports.mailService, exports.mailRepository);
exports.resetPasswordValidator = new ResetPasswordJoiValidator_1.ResetPasswordJoiValidator();
exports.createUserValidator = new CreateUserJoiValidator_1.CreateUserJoiValidator();
exports.updateUserValidator = new UpdateUserJoiValidator_1.UpdateUserJoiValidator();
exports.createUserDeviceValidator = new CreateUserDeviceJoiValidator_1.CreateUserDeviceJoiValidator();
exports.createTokenUseCase = new CreateTokenUseCase_1.CreateTokenUseCase(exports.tokenRepository);
exports.deletePortfolioUseCase = new ListTokenUseCase_1.ListTokenUseCase(exports.tokenRepository);
exports.deleteTokenUseCase = new DeleteTokenUseCase_1.DeleteTokenUseCase(exports.tokenRepository);
exports.updateTokenUseCase = new UpdateTokenUseCase_1.UpdateTokenUseCase(exports.tokenRepository);
exports.getTokenUseCase = new GetTokenUseCase_1.GetTokenUseCase(exports.tokenRepository);
exports.listTokenUseCase = new ListTokenUseCase_1.ListTokenUseCase(exports.tokenRepository);
exports.adminService = new AdminService_1.AdminService(exports.resetPasswordValidator, exports.adminRepository, exports.adminPasswordResetRepository, exports.adminAuthService, exports.adminMailerService, exports.uniqueIdentifierService);
exports.userService = new UserService_1.UserService(exports.createUserValidator, exports.resetPasswordValidator, exports.updateUserValidator, exports.userRepository, exports.userAggregatorRepository, exports.userVerificationRepository, exports.userPasswordResetRepository, exports.authService, exports.userMailService, exports.uniqueIdentifierService);
exports.userDeviceService = new UserDeviceService_1.UserDeviceService(exports.createUserDeviceValidator, exports.userDeviceRepository);
exports.adminPassportMiddleware = new middlewares_1.AdminPassportMiddleware(exports.config, exports.adminAuthService);
exports.userPassportMiddleware = new middlewares_1.UserPassportMiddleware(exports.config, exports.authService, exports.userService);
exports.adminRecaptchaMiddleware = new RecaptchaMiddleware_1.RecaptchaMiddleware(exports.config.recaptcha.admin);
exports.appRecaptchaMiddleware = new RecaptchaMiddleware_1.RecaptchaMiddleware(exports.config.recaptcha.app);
exports.organizationRecaptchaMiddleware = new RecaptchaMiddleware_1.RecaptchaMiddleware(exports.config.recaptcha.organization);
//# sourceMappingURL=app.js.map